"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logging_1 = require("./logging");
const paramsLogger = logging_1.createLogger('params');
const QUALITY = 'quality';
const UNSET = Symbol('unset');
class FastlyParams {
    constructor(params, req, res) {
        this.warnings = [];
        this.cachedQuality = UNSET;
        this.rgbRE = /^(?:[0-9a-fA-F]{3}){1,2}$/;
        this.raw = params;
        this.req = req;
        this.res = res;
        this.log = paramsLogger.child({ req });
    }
    get quality() {
        if (this.cachedQuality !== UNSET) {
            return this.cachedQuality;
        }
        if (!this.has(QUALITY)) {
            this.cachedQuality = undefined;
            return this.cachedQuality;
        }
        this.cachedQuality = Number(this.get(QUALITY));
        if (isNaN(this.cachedQuality)) {
            this.cachedQuality = undefined;
        }
        return this.cachedQuality;
    }
    get(param) {
        return this.raw.get(param);
    }
    has(param) {
        return this.raw.has(param);
    }
    warn(type, param, msg) {
        this.warnings.push({
            msg: `Parameter "${param}=${this.get(param)}" is ${type}${msg ? ' -- ' + msg : ''}`,
            type,
        });
    }
    getWarnings() {
        return this.warnings.slice();
    }
    toNumbers(names) {
        const nums = [];
        for (const name of names) {
            if (this.has(name)) {
                const param = this.get(name);
                const num = Number(param);
                if (isNaN(num)) {
                    this.warn('invalid', name, 'must be a valid number');
                }
                nums.push(num);
            }
            else {
                nums.push(undefined);
            }
        }
        return nums;
    }
    toCssBox(name) {
        const csv = this.get(name);
        const values = csv.split(',');
        if (values.length > 4) {
            this.warnFail('invalid', name, 'must be 1 to 4 comma-separated pixel values');
        }
        const nums = [];
        for (const value of values) {
            const num = Number(value);
            if (isNaN(num)) {
                this.warnFail('invalid', name, 'values must be numeric');
            }
            if (num > 0 && num < 1) {
                this.warnFail('unsupported', name, 'percentage-based padding');
            }
            nums.push(num);
        }
        if (nums.length === 4) {
            return {
                bottom: nums[2],
                left: nums[3],
                right: nums[1],
                top: nums[0],
            };
        }
        if (nums.length === 3) {
            return {
                bottom: nums[2],
                left: nums[1],
                right: nums[1],
                top: nums[0],
            };
        }
        if (nums.length === 2) {
            return {
                bottom: nums[0],
                left: nums[1],
                right: nums[1],
                top: nums[0],
            };
        }
        return {
            bottom: nums[0],
            left: nums[0],
            right: nums[0],
            top: nums[0],
        };
    }
    toColor(name) {
        const die = () => {
            return this.warnFail('invalid', name, 'must be formatted as RGB 0-255,0-255,0-255 or as RGBA 0-255,0-255,0-255,0-1.0');
        };
        const param = this.get(name);
        if (this.rgbRE.test(param)) {
            // sharp can support a plain color name, as long as it has a #
            return '#' + param;
        }
        const values = param.split(',');
        const toRgb = (nums) => {
            if (nums.some((num) => num < 0 || num > 255)) {
                die();
            }
            const [r, g, b] = nums;
            return { r, g, b };
        };
        if (values.length === 4) {
            const nums = values.map(Number);
            const alpha = nums.pop();
            if (alpha < 0 || alpha > 1) {
                die();
            }
            const rgba = toRgb(nums);
            rgba.alpha = alpha;
            return rgba;
        }
        else if (values.length === 3) {
            const rgba = toRgb(values.map(Number));
            return rgba;
        }
        return die();
    }
    toTaggedValues(name, positional, named) {
        const csv = this.get(name);
        const values = csv.split(',').map((v) => v.toLowerCase().trim());
        const tagged = {};
        named.forEach((n) => {
            const valueIndex = values.findIndex((value) => value.startsWith(n));
            if (valueIndex > -1) {
                tagged[n] = values[valueIndex].slice(n.length);
                values.splice(valueIndex, 1);
            }
        });
        // values should just be required positional now
        if (values.length !== positional.length) {
            this.warnFail('invalid', name, `got ${values.length} arguments, expected ${positional}`);
        }
        else {
            values.forEach((value, i) => {
                tagged[positional[i]] = value;
            });
        }
        return tagged;
    }
    toRegion(name) {
        const csv = this.get(name);
        if (csv.includes(':') || csv.includes('offset')) {
            this.warnFail('unsupported', name, 'ratio-based regions');
        }
        const values = this.toTaggedValues(name, ['width', 'height'], ['x', 'y', 'smart', 'offset-x', 'offset-y']);
        if (values.hasOwnProperty('smart')) {
            this.warnFail('unsupported', name, 'smart image cropping');
        }
        const validate = (tag, optional) => {
            if (optional && !values.hasOwnProperty(tag)) {
                return;
            }
            const value = Number(values[tag]);
            if (isNaN(value)) {
                if (optional) {
                    this.warn('invalid', name, `${tag} must be a number`);
                    return undefined;
                }
                else {
                    this.warnFail('invalid', name, `${tag} must be a number`);
                }
            }
            if (value < 1 && value !== 0) {
                this.warnFail('unsupported', name, `percentage ${tag} value in regions (must use absolute pixels)`);
            }
            return value;
        };
        const region = {
            height: validate('height'),
            width: validate('width'),
        };
        const left = validate('x', true);
        if (left !== undefined) {
            region.left = left;
        }
        const top = validate('y', true);
        if (top !== undefined) {
            region.top = top;
        }
        return region;
    }
    warnFail(type, name, msg) {
        this.warn(type, name, msg);
        throw new Error(`[${type} ${name}] ${msg}`);
    }
}
exports.default = FastlyParams;
//# sourceMappingURL=data:application/json;base64,